name: CI

on:
    workflow_dispatch:
    pull_request:
    push:
        branches:
            - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-24.04

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

    lint:
        name: Run code linter
        runs-on: ubuntu-24.04
        needs: build

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

            - name: Lint
              run: poetry run $(make lint --just-print --silent)

    type-check:
        name: Check static types
        runs-on: ubuntu-24.04
        needs: build

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

            - name: Check static types
              run: poetry run $(make type-check --just-print --silent)

    safety-check:
        name: Scan packages for vulnerabilities
        runs-on: ubuntu-24.04
        needs: build

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

            - name: Scan packages for vulnerabilities
              run: poetry run $(make safety-check --just-print --silent)

    spelling-check:
        name: Run spelling check
        runs-on: ubuntu-24.04
        needs: build

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

            - uses: codespell-project/codespell-problem-matcher@v1

            - name: Run spelling check
              run: poetry run $(make spelling-check --just-print --silent)

    test:
        name: Run the tests
        runs-on: ubuntu-22.04
        container: python:3.11-bookworm
        needs: build
        services:
          postgres:
            image: postgres:14
            env:
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: postgres
              POSTGRES_DB: testing
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5

        steps:
            - name: Checkout repositories
              uses: actions/checkout@v4

            - name: Run build action
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/poetry-install@main
              with:
                python_version: "3.11"

            - name: Install dependencies
              run: |
                apt-get update
                apt-get install --yes --no-install-recommends postgresql-client

            - name: Run the tests
              run: poetry run $(make test --just-print --silent)

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                name: coverage
                path: coverage.xml

    sonar:
        name: SonarCloud
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Download coverage report
              uses: actions/download-artifact@v4
            - name: Run SonarCloud scanner
              uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/sonarcloud@main
              with:
                sonar-token: ${{ secrets.SONAR_TOKEN }}

    detect_modified_files:
        name: Modified files
        runs-on: ubuntu-latest
        outputs:
          dockerfile_changed: ${{ steps.changed-files.outputs.any_changed }}
          all_modified_files: ${{ steps.changed-files.outputs.all_modified_files }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Get changed files
              id: changed-files
              uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
              with:
                files: |
                  docker/Dockerfile

    push_container:
        if: |
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/v') ||
          needs.detect_modified_files.outputs.dockerfile_changed == 'true'
        name: Create and publish Docker image to the Github Package Registry
        runs-on: ubuntu-latest
        needs: [build, lint, type-check, safety-check, spelling-check, test, detect_modified_files]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ghcr.io/${{ github.repository }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              env:
                NEW_UID: 1000
                NEW_GID: 1000
              with:
                context: .
                file: docker/Dockerfile
                push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                build-args: |
                  NEW_UID=${{ env.NEW_UID }}
                  NEW_GID=${{ env.NEW_GID }}
